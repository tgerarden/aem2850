---
#########################################################
# Steps to complete this homework:
#   1. Add your name to the author field of the yaml header
#   2. Fill in the code chunks and use inline code to answer the questions 
#   3. Click on "Render" directly above to render output (or Ctrl/Cmd-Shift-K)
#   4. Repeat steps 2-3 until you are satisfied with the final product
#   5. Download the resulting file homework-xx.pdf
#   6. Upload homework-xx.pdf to canvas
# Note: this file may not Render properly until it is (partially) completed
# Reminder: to get around this and work interactively, you can run code chunks on their own
# You can do this using keyboard shortcuts, icons in each chunk, or Run at the top right of this pane
#########################################################
title: "Homework - Week 4"
author: "Write your name here"
date: today
format: pdf
urlcolor: blue
---

```{r setup, include = FALSE}
library(tidyverse)
# the next line causes the output to omit output from functions like read_csv()
knitr::opts_chunk$set(message = FALSE)
```

# Preface

The goal of this assignment is to help you gain more familiarity with joining multiple data sets and working with logical vectors. In this homework we will continue providing some code snippets to serve as "scaffolding" to help guide you through each step. Over the course of the semester we will provide less scaffolding and more open-ended questions. As always, please come to office hours and reach out to your teaching staff if you have any questions.

We will work with multiple data sets:

1. Data on the Texas housing market from **tidy_txhouse.csv**, which was derived from the `txhousing` dataset provided by **ggplot2**. Within those data, `sales` is the number of sales and `price` is the median sale price. See here for details of the [original dataset](https://ggplot2.tidyverse.org/reference/txhousing.html).
2. Population data in **tidy_txpop.csv**, which was downloaded from the [United States Census Bureau](https://www.census.gov/data/tables/time-series/demo/popest/2010s-total-cities-and-towns.html).
3. Other data sets that come from the **Quarterly Census of Employment and Wages** from the [U.S. Bureau of Labor Statistics](https://data.bls.gov/cew/apps/data_views/data_views.htm#tab=Tables).


<!--- Please leave the code above unchanged. Questions start from here. --->

{{< pagebreak >}}

## 1. Import `tidy_txhouse.csv` and `tidy_txpop.csv`, and create a data frame of sales, price, and population for all the city-year pairs that appear in **both** `tidy_txpop` and `tidy_txhouse`. Of these, which city had the most sales per capita in 2010?
<!-- Tip: By using `pull` to get just the city name and assigning it to `most_spc`, we can embed the answer in text rather than simply printing a data frame. -->

```{r echo = TRUE}
tidy_txhouse <- _____(_____)

tidy_txpop <- _____(_____)

most_spc <- inner_join(
  _____, 
  _____, 
  join_by(_____, _____)
) |> 
  filter(_____ == _____) |> 
  mutate(sales_per_capita = _____ / _____) |> 
  slice_max(_____) |> 
  pull(_____)
```
The city with the most sales per capita in 2010 was `r most_spc`.


{{< pagebreak >}}

## 2. How many different cities does `tidy_txhouse` include? How many cities does `tidy_txpop` include? Use a join command to print a data frame containing the cities that are in `tidy_txhouse` but not included in `tidy_txpop`. Make sure each city only appears once in the resulting data frame.

``` {r echo = TRUE}
tx_house_city <- _____ |> 
  distinct(_____) 

tx_pop_city <- _____|> 
  distinct(_____)
```
`tidy_txhouse` includes `r count(tx_house_city)` cities.

`tidy_txpop` includes `r count(tx_pop_city)` cities.

The following cities are in `tidy_txhouse` but not `tidy_txpop`:
``` {r echo = TRUE}
_____(
  _____, 
  _____, 
  join_by(_____)
)
```


{{< pagebreak >}}

## 3. Use a filtering join to identify the cities in `tidy_txhouse` that are also in `tidy_txpop`. Then, for those cities that appear in both data frames, calculate the average housing price for each of the cities, averaging over over the period 2010 through 2012 (inclusive). Which city has the highest average housing price? Which city has the lowest average housing price?

``` {r echo = TRUE}
city_average_prices <- _____(
  tidy_txhouse, 
  tx_pop_city, 
  join_by(city)
) |> 
  _____(_____ & _____) |> 
  group_by(_____) |> 
  _____(mean_price = _____(price, na.rm = T))

highest_price_city <- city_average_prices |> 
  filter(mean_price == _____(mean_price))

lowest_price_city <- city_average_prices |> 
  _____(_____ == _____(_____))
```  
`r highest_price_city |> pull(city)` has the highest housing price.

`r lowest_price_city |> pull(city)` has the lowest housing price.


{{< pagebreak >}}

## 4. For the two cities with the highest and lowest housing prices you found in Q3, what counties are they in?
<!-- Tip: Import the data in `us_cities.csv`, filter out the cities in Texas, and assign it to a new object `tx_cities`. Then think through how it can help you answer this question. -->

```{r echo = TRUE}
tx_cities <- _____(_____) |> 
  filter(state_id == _____)

highest_price_county <- _____(
  _____, 
  tx_cities, 
  join_by(_____)
)

lowest_price_county <- _____(
  lowest_price_city, 
  _____, 
  _____(_____)
)
```
`r highest_price_city |> pull(city)` is in `r highest_price_county |> pull(county_name)`.

`r lowest_price_city |> pull(city)` is in `r lowest_price_county |> pull(county_name)`.


{{< pagebreak >}}

## 5. Now let's import the datasets `us_county_wage_2024.csv` and `area-titles.csv`. The first dataset records employment and wage data by `area_fips` in 2024. The second dataset contains the name that each `area_fips` corresponds to. Join these data to find all combinations that appear in both datasets, separate `area_title` into the variables `county` and `state`, and filter the counties in Texas. How many counties are there in Texas? What are the average annual pay in the two counties from Q4?
<!-- Tip: Look at the contents of `area_title` to determine what delimiter to use for separating it into two separate variables. -->

```{r echo = TRUE}
us_county_wage <- read_csv(_____)

area_titles <- read_csv(_____)

txcounty_wage <- us_county_wage |> 
  _____(area_titles, join_by(_____)) |> 
  separate_wider_delim(
    cols = area_title, 
    delim = "_____", 
    names = c("_____", "_____"),
    too_few = "align_end" # how to deal with cases w/ no delimiter (DC)
  ) |> 
  filter(_____ == "Texas")

highest_county_pay <- txcounty_wage |> 
  semi_join(_____, by = join_by(county == county_name))

lowest_county_pay <- _____ |> 
  _____(lowest_price_county, by = _____(_____ == _____))
```
There are `r count(txcounty_wage)` Texas counties in the QCEW data.

The average annual pay for `r highest_price_county |> pull(county_name)` is $`r format(highest_county_pay |> pull(avg_annual_pay), big.mark = ",")`.

The average annual pay for `r lowest_price_county |> pull(county_name)` is $`r format(lowest_county_pay |> pull(avg_annual_pay), big.mark = ",")`.


{{< pagebreak >}}

## 6. Now let's import the data contained in `industry_wage_2024.csv`, which records the US average employment and wage by industry in 2024. First look at NAICS2 industries, which are in rows indicated by the logical variable `naics2`. Join the wage data with information contained in `industry-titles.csv` so you know what the industry codes mean. Which of those industries have an average annual pay higher than $125,000?
<!-- Tip: Print (output) just the industry titles for those industries as a data frame or vector. -->

```{r echo = TRUE}
_____
```


{{< pagebreak >}}

## 7. Create a new variable `wage_bin` indicating the level of pay by industry. Fill that new variable with ">120k" for rows with an industry annual pay greater than $120,000; "90k-120k" for $90,000-120,000; "60k-90k" for $60,000-90,000; and "0k-60k" for lower than $60,000. How many NAICS2 industries are there for each wage bin?

```{r echo = TRUE}
_____
```


{{< pagebreak >}}

## 8. Let's zoom in on NAICS6 industries within the broader finance and insurance industry, and find the one with the highest annual pay. First use filter to get the rows that correspond to that subgroup. Next, use `ifelse` to generate a new variable `highest_wage` that equals `TRUE` for the industry with the highest annual pay and `FALSE` otherwise. Use `highest_wage` to filter the data. Finally, join the data frame with `industry_titles` to get the industry title. Assign the resuling data frame to `highest_fin_wage`. (These steps are good practice even though they aren't the simplest way to answer the question!). Which industry has the highest annual pay?
<!-- Tip: We provided the columns `naics6` and `finance_and_insurance` to help you filter the data to get relevant rows for this problem. -->

```{r echo = TRUE}
_____
```
The highest annual pay in the finance and insurance industry is for the `r highest_fin_wage |> pull(industry_title)` industry, where the average annual pay is $`r format(highest_fin_wage |> pull(avg_annual_pay), big.mark = ",")`.

